#include <iostream>
#include <cmath>
#include <chrono>
#include <future>
#include <fstream>
#include <random>

using namespace std;

//GLOBAL DECLARATION
double pi = 4*atan(1), a, b, k, circleDivider, power, areaGamma, var;

//INITIALIZATION
bool validate(double randX, double randY);
double radiusProb(double x, double y);
double randGen(int N);
double calcArea(int power);

int main() {
    cout.precision(10); //adjust precision of print values in terminal
    circleDivider = 1000; //number of divisions within circle, used in 'radiusProb'
    int var = 250000;    //Number of random points per thread
    power = 2;  //'n' value in super ellipse equation

    //OPEN FILE, requires existing filed named 'mathTest.csv'
    std::ofstream myfile;
    myfile.precision(10); //adjust precision of print values in file
    myfile.open ("mathTest.csv", std::ios_base::app);   //TO APPEND CSV

    myfile << "k value, a value, Circle Divider: "<< circleDivider <<", Points: "<< var*4 << endl;

    //SET K VALUES
    double kStart = 0.895;
    double kLim = 0.896;
    double kInc = 2;   //NUM OF k INCREMENTS, along x axis

    //SET A VALUES
    double aStart = 0.57;
    double aLim = 0.6;
    double aInc = 10;   //NUM OF a INCREMENTS, along y axis

    double aBest, curPercent, percent_in_MT;

    auto t1 = std::chrono::high_resolution_clock::now(); //start clock for overall time

    for (k=kStart; k<=kLim; k+= (kLim-kStart)/kInc)  {

        curPercent = 0.;
        aBest = 0.;

        for (a=aStart; a<=aLim; a+= (aLim-aStart)/aInc) {

            areaGamma = calcArea(power);
            b = 1. / (a * areaGamma);

            auto t3 = std::chrono::high_resolution_clock::now();  //start clock for internal time seen in terminal

            //call randGen function
            auto thread_1 = std::async(std::launch::async, randGen, var);
            auto thread_2 = std::async(std::launch::async, randGen, var);
            auto thread_3 = std::async(std::launch::async, randGen, var);
            auto thread_4 = std::async(std::launch::async, randGen, var);
            percent_in_MT = (thread_1.get() + thread_2.get() + thread_3.get() + thread_4.get()) / 4.;

            //stop and print inner clock time seen in terminal
            auto t4 = std::chrono::high_resolution_clock::now();
            auto interDuration = std::chrono::duration_cast<std::chrono::microseconds>(t4 - t3).count();
            cout<< (double)interDuration/(1000000) << endl;

            if (percent_in_MT >= curPercent) {
                curPercent = percent_in_MT;
                aBest = a;
            }
        }

        myfile << k << "," <<  aBest <<  endl;
    }

    //stop and print overall clock timer
    auto t2 = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>( t2 - t1 ).count();
    cout << endl << (double)duration/(1000000) << " s";

    myfile.close();
    return(0);
}

double radiusProb(double x, double y){
    double omega = 2.*pi/circleDivider;
    double pointInRange = 0;
    for (int n = 0; n < circleDivider; n++){
        if (validate(x + (k * cos(n * omega)), y + (k * sin(n * omega))))
            pointInRange++;
    }
    return (double)pointInRange/circleDivider;
}

bool validate(double randX, double randY){
    double xa = pow(randX/a,power);
    double yb = pow(randY/b,power);

    return 1. >= ((xa) + (yb));
}

double randGen(int N){
    double percentIn = 0;
    double weight = 0;
    double yLim = 0;
    double x, y;

    //seed generator
    std::random_device r;
    std::seed_seq seed{r()};
    static thread_local std::mt19937 generator(seed);

    //set distribution range along x-axis
    std::uniform_real_distribution<double> distribution_x(0., a);

    for (int i = 0; i < N; i++) {
        x = distribution_x(generator);

        //set yLim based on ellipse equation
        yLim = b*(pow((1. - pow((x/a),power)),1/power));

        //set distribution range along y-axis
        std::uniform_real_distribution<double> distribution_y(0., yLim);

        y = distribution_y(generator);

        percentIn += (radiusProb(x, y))*(yLim);
        weight += yLim;
    }
    return percentIn/weight;
}

double calcArea(int power) { //area of superellipse = 4ab*GAMMA
    areaGamma = pow(tgamma(1 + (1 / power)), 2);
    areaGamma = 4 * areaGamma / tgamma(1 + (2 / power));
}
